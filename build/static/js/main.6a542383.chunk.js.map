{"version":3,"sources":["scanner.jsx","App.js","reportWebVitals.js","index.js"],"names":["Scanner","props","useState","isDetected","setIsDetected","setResult","useEffect","Quagga","init","config","err","console","log","start","stop","onProcessed","result","drawingCtx","canvas","ctx","overlay","drawingCanvas","dom","boxes","clearRect","Number","getAttribute","filter","box","forEach","ImageDebug","drawPath","x","y","color","lineWidth","codeResult","code","line","onDetected","detected","isReload","setBarcodeNumber","document","getElementById","getElementsByTagName","pause","className","id","App","setIsReload","barcodeNumber","inputReset","onClick","style","cursor","href","e","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"6OAyFeA,MArFf,SAAiBC,GACb,MAA4BC,oBAAS,GAArC,mBACA,GADA,UACoCA,oBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4BF,mBAAS,MAArC,mBAAeG,GAAf,WAKAC,qBAAU,WACNF,GAAc,GACdG,IAAOC,KAAKC,GAAQ,SAAAC,GAKhB,OAJIA,GACAC,QAAQC,IAAIF,EAAK,aAErBH,IAAOM,QACA,WACHN,IAAOO,WAKfP,IAAOQ,aAAY,SAAAC,GACf,IAAIC,EAAaV,IAAOW,OAAOC,IAAIC,QACnCC,EAAgBd,IAAOW,OAAOI,IAAIF,QAE9BJ,IACIA,EAAOO,QACPN,EAAWO,UACP,EACA,EACAC,OAAOJ,EAAcK,aAAa,UAClCD,OAAOJ,EAAcK,aAAa,YAEtCV,EAAOO,MACFI,QAAO,SAASC,GACjB,OAAOA,IAAQZ,EAAOY,OAErBC,SAAQ,SAASD,GAClBrB,IAAOuB,WAAWC,SAASH,EAAK,CAAEI,EAAG,EAAGC,EAAG,GAAKhB,EAAY,CACxDiB,MAAO,QACPC,UAAW,QAKnBnB,EAAOY,KACPrB,IAAOuB,WAAWC,SAASf,EAAOY,IAAK,CAAEI,EAAG,EAAGC,EAAG,GAAKhB,EAAY,CAC/DiB,MAAO,OACPC,UAAW,IAIfnB,EAAOoB,YAAcpB,EAAOoB,WAAWC,MACvC9B,IAAOuB,WAAWC,SACdf,EAAOsB,KACP,CAAEN,EAAG,IAAKC,EAAG,KACbhB,EACA,CAAEiB,MAAO,MAAOC,UAAW,QAM3C5B,IAAOgC,WAAWC,KACnB,CAACvC,EAAMwC,WAEV,IAAMD,EAAW,SAAAxB,GACTb,IACAQ,QAAQC,IAAII,EAAOoB,WAAWC,MAC9BpC,EAAMyC,iBAAiB1B,EAAOoB,WAAWC,OAE7CjC,GAAc,GACKuC,SAASC,eAAe,eAChCC,qBAAqB,SAAS,GAAGC,QAC5CvC,IAAOO,OAtEQ,SAAAE,GACfX,EAAUW,GAsEVuB,CAAWvB,EAAOoB,WAAWC,OAGjC,OACI,qBAAKU,UAAU,mBAAf,SACI,qBAAKC,GAAG,cAAcD,UAAU,gB,MC7C7BE,MAnCf,WACI,MAAgC/C,oBAAS,GAAzC,mBAAOuC,EAAP,KAAiBS,EAAjB,KACA,EAA0ChD,mBAAS,kBAAnD,mBAAOiD,EAAP,KAAsBT,EAAtB,KACApC,qBAAU,WACNoC,EAAiB,oBACnB,CAACD,IAEH,IAIMW,EAAa,WACfV,EAAiB,KAGrB,OACI,sBAAKK,UAAU,kDAAf,UACI,cAAC,EAAD,CAASL,iBAAkBA,EAAkBD,SAAUA,IACvD,qBAAKM,UAAU,uEAAuEM,QAAS,WAVnGD,KAUyHE,MAAO,CAACC,OAAQ,WAArI,SACI,4BAAIJ,MAER,qBAAKJ,UAAU,sBAAf,SACI,mBAAGS,KAAK,IAAIH,QAAS,SAACI,GAClBA,EAAEC,kBACHX,UAAU,8EAFb,6CAIJ,wBAAQM,QAAS,WACbD,IACAF,GAAaT,IACVM,UAAU,wCAHjB,sCClBGY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAASC,eAAe,SAM1Be,K","file":"static/js/main.6a542383.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Quagga from \"quagga\";\nimport config from \"./scannerConfig.json\";\n\nfunction Scanner(props) {\n    const [camera, setCamera] = useState(false);\n    const [isDetected, setIsDetected] = useState(false)\n    const [result, setResult] = useState(null);\n    const onDetected = result => {\n        setResult(result);\n    };\n  \n    useEffect(() => {\n        setIsDetected(false)\n        Quagga.init(config, err => {\n            if (err) {\n                console.log(err, \"error msg\");\n            }\n            Quagga.start();\n            return () => {\n                Quagga.stop()\n            }\n        });\n\n        //detecting boxes on stream\n        Quagga.onProcessed(result => {\n            var drawingCtx = Quagga.canvas.ctx.overlay,\n            drawingCanvas = Quagga.canvas.dom.overlay;\n\n            if (result) {\n                if (result.boxes) {\n                    drawingCtx.clearRect(\n                        0,\n                        0,\n                        Number(drawingCanvas.getAttribute(\"width\")),\n                        Number(drawingCanvas.getAttribute(\"height\"))\n                    );\n                    result.boxes\n                        .filter(function(box) {\n                        return box !== result.box;\n                        })\n                        .forEach(function(box) {\n                        Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, {\n                            color: \"green\",\n                            lineWidth: 2\n                        });\n                    });\n                }\n\n                if (result.box) {\n                    Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, {\n                        color: \"#00F\",\n                        lineWidth: 2\n                    });\n                }\n\n                if (result.codeResult && result.codeResult.code) {\n                    Quagga.ImageDebug.drawPath(\n                        result.line,\n                        { x: \"x\", y: \"y\" },\n                        drawingCtx,\n                        { color: \"red\", lineWidth: 3 }\n                    );\n                }\n            }\n        });\n\n        Quagga.onDetected(detected);\n    }, [props.isReload]);\n\n    const detected = result => {\n        if(!isDetected){\n            console.log(result.codeResult.code)\n            props.setBarcodeNumber(result.codeResult.code)\n        }\n        setIsDetected(true)\n        const cameraFeed = document.getElementById(\"interactive\")\n        cameraFeed.getElementsByTagName(\"video\")[0].pause();\n        Quagga.stop()\n        onDetected(result.codeResult.code);\n    };\n\n    return (\n        <div className=\"camera-container\">\n            <div id=\"interactive\" className=\"viewport\" />\n        </div>\n    );\n}\n\nexport default Scanner;\n","import React, { useState, useEffect } from 'react'\nimport Scanner from './scanner';\nimport './App.css'\n\nfunction App() {\n    const [isReload, setIsReload] = useState(false)\n    const [barcodeNumber, setBarcodeNumber] = useState(\"Barcode Number\")\n    useEffect(() => {\n        setBarcodeNumber(\"Barcode Number\")\n    },[isReload])\n\n    const handleUndo = () => {\n        inputReset()\n    }\n\n    const inputReset = () => {\n        setBarcodeNumber(\"\")\n    }\n\n    return (\n        <div className=\"flex flex-col gap-2 justify-center items-center\">\n            <Scanner setBarcodeNumber={setBarcodeNumber} isReload={isReload}/>\n            <div className=\"flex mt-2 justify-center border-black border-b-2 gap-2 text-gray-600\" onClick={() => {handleUndo()}} style={{cursor: 'pointer'}}>\n                <p>{barcodeNumber}</p>\n            </div>\n            <div className=\"flex justify-center\">\n                <a href=\"/\" onClick={(e) => {\n                    e.preventDefault()\n                }} className=\"text-xs underline text-blue-600 hover:text-blue-800 visited:text-purple-600\">Input barcode number manually</a>\n            </div>\n            <button onClick={() => {\n                inputReset()\n                setIsReload(!isReload)\n                }} className=\"py-4 px-1 mt-4 rounded-xl btn-success\">Scan Another Barcode\n            </button>\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}